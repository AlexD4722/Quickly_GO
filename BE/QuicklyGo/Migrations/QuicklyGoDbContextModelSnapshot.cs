// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuicklyGo.Data;

#nullable disable

namespace QuicklyGo.Migrations
{
    [DbContext(typeof(QuicklyGoDbContext))]
    partial class QuicklyGoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuicklyGo.Models.Conversation", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("Group")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlImg")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Img/avatar/User-Default.jpg");

                    b.HasKey("Id");

                    b.ToTable("Conversations");

                    b.HasData(
                        new
                        {
                            Id = "KwofCoKs3ThJVE5gOkbn8",
                            CreateAt = new DateTime(2024, 4, 4, 14, 27, 25, 885, DateTimeKind.Local).AddTicks(8378),
                            Description = "Admin conversation",
                            Group = false,
                            Name = "Admin",
                            Status = 1,
                            UpdateAt = new DateTime(2024, 4, 4, 14, 27, 25, 885, DateTimeKind.Local).AddTicks(8379)
                        });
                });

            modelBuilder.Entity("QuicklyGo.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BodyContent")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(21)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(21)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BodyContent = "Hello",
                            ConversationId = "KwofCoKs3ThJVE5gOkbn8",
                            CreateAt = new DateTime(2024, 4, 4, 14, 27, 25, 885, DateTimeKind.Local).AddTicks(8415),
                            CreatorId = "0KhfroI2WdGEHFQf7LU6B",
                            Status = 0,
                            UpdateAt = new DateTime(2024, 4, 4, 14, 27, 25, 885, DateTimeKind.Local).AddTicks(8415)
                        },
                        new
                        {
                            Id = 2,
                            BodyContent = "Hi",
                            ConversationId = "KwofCoKs3ThJVE5gOkbn8",
                            CreateAt = new DateTime(2024, 4, 4, 14, 27, 25, 885, DateTimeKind.Local).AddTicks(8419),
                            CreatorId = "0KhfroI2WdGEHFQf7LU6B",
                            Status = 0,
                            UpdateAt = new DateTime(2024, 4, 4, 14, 27, 25, 885, DateTimeKind.Local).AddTicks(8419)
                        },
                        new
                        {
                            Id = 3,
                            BodyContent = "what are you doing ?",
                            ConversationId = "KwofCoKs3ThJVE5gOkbn8",
                            CreateAt = new DateTime(2024, 4, 4, 14, 27, 25, 885, DateTimeKind.Local).AddTicks(8422),
                            CreatorId = "85GBCdMebC8qRHCXdDUqm",
                            Status = 0,
                            UpdateAt = new DateTime(2024, 4, 4, 14, 27, 25, 885, DateTimeKind.Local).AddTicks(8423)
                        });
                });

            modelBuilder.Entity("QuicklyGo.Models.Notice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(21)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(2024, 4, 4, 14, 27, 25, 885, DateTimeKind.Local).AddTicks(8461),
                            Description = "Notice 1",
                            Status = 1,
                            Title = "Notice 1",
                            UpdateAt = new DateTime(2024, 4, 4, 14, 27, 25, 885, DateTimeKind.Local).AddTicks(8462),
                            UserId = "0KhfroI2WdGEHFQf7LU6B"
                        });
                });

            modelBuilder.Entity("QuicklyGo.Models.ReadMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<string>("ReceipientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(21)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("ReceipientId");

                    b.ToTable("MessageReceipients");
                });

            modelBuilder.Entity("QuicklyGo.Models.Relationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FriendId")
                        .IsRequired()
                        .HasColumnType("nvarchar(21)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(21)");

                    b.HasKey("Id");

                    b.HasIndex("FriendId");

                    b.HasIndex("UserId");

                    b.ToTable("Relationships");
                });

            modelBuilder.Entity("QuicklyGo.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlBackground")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Img/avatar_background/default.jpg");

                    b.Property<string>("UrlImgAvatar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Img/avatar/User-Default.jpg");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerifyCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "0KhfroI2WdGEHFQf7LU6B",
                            CreateAt = new DateTime(2024, 4, 4, 14, 27, 25, 210, DateTimeKind.Local).AddTicks(1633),
                            Email = "admin@gmail.com",
                            FirstName = "Admin",
                            LastName = "Admin",
                            Password = "$2a$11$UB0pLgL3bQzFJ8FGOMX5QetiWfyjO00GeBpZtfR8WaKEolcTZ./sC",
                            PhoneNumber = "0123456789",
                            Role = 0,
                            Status = 1,
                            UpdateAt = new DateTime(2024, 4, 4, 14, 27, 25, 210, DateTimeKind.Local).AddTicks(1742),
                            UserName = "admin",
                            VerifyCode = "123456"
                        },
                        new
                        {
                            Id = "85GBCdMebC8qRHCXdDUqm",
                            CreateAt = new DateTime(2024, 4, 4, 14, 27, 25, 355, DateTimeKind.Local).AddTicks(1855),
                            Email = "lamtran@gmail.com",
                            FirstName = "Lam",
                            LastName = "Tran",
                            Password = "$2a$11$QTOFIv.b8ElWKgVrSuQtw.teRsCR7CmNQuJ0UaxB8cfAWZ.65eAEi",
                            PhoneNumber = "0123456781",
                            Role = 0,
                            Status = 1,
                            UpdateAt = new DateTime(2024, 4, 4, 14, 27, 25, 355, DateTimeKind.Local).AddTicks(1975),
                            UserName = "lamtran",
                            VerifyCode = "123456"
                        },
                        new
                        {
                            Id = "t30fnEOCCcuja8zcBrVdH",
                            CreateAt = new DateTime(2024, 4, 4, 14, 27, 25, 496, DateTimeKind.Local).AddTicks(9805),
                            Email = "dungnguyen@gmail.com",
                            FirstName = "Dung",
                            LastName = "Nguyen",
                            Password = "$2a$11$fak6x0UyZ6yc9fjQbEwtEuJAfsgmOM73kJv8q18rjUMnAU.Z9LKi.",
                            PhoneNumber = "0123456782",
                            Role = 0,
                            Status = 1,
                            UpdateAt = new DateTime(2024, 4, 4, 14, 27, 25, 496, DateTimeKind.Local).AddTicks(9838),
                            UserName = "dungnguyen",
                            VerifyCode = "123456"
                        },
                        new
                        {
                            Id = "FVHgafCy1NhVkKfJ0gnha",
                            CreateAt = new DateTime(2024, 4, 4, 14, 27, 25, 632, DateTimeKind.Local).AddTicks(5048),
                            Email = "vinhnguyen@gmail.com",
                            FirstName = "Vinh",
                            LastName = "Nguyen",
                            Password = "$2a$11$TULxxAKLbu3xNHx.OeV9ueGXi3dshSMe.OCJ5SR1zGfFBPeaHMg2y",
                            PhoneNumber = "0123456783",
                            Role = 0,
                            Status = 1,
                            UpdateAt = new DateTime(2024, 4, 4, 14, 27, 25, 632, DateTimeKind.Local).AddTicks(5060),
                            UserName = "vinhnguyen",
                            VerifyCode = "123456"
                        },
                        new
                        {
                            Id = "qenbeVD2Y19Kyx4DGfYfj",
                            CreateAt = new DateTime(2024, 4, 4, 14, 27, 25, 758, DateTimeKind.Local).AddTicks(9915),
                            Email = "bradpitt@gmail.com",
                            FirstName = "Brad",
                            LastName = "Pitt",
                            Password = "$2a$11$F7KF42owyBkunUAG11tyBe0Z5pXlMtmyoFBl1CSag5uYiQIZe.CZS",
                            PhoneNumber = "0123456784",
                            Role = 0,
                            Status = 1,
                            UpdateAt = new DateTime(2024, 4, 4, 14, 27, 25, 758, DateTimeKind.Local).AddTicks(9920),
                            UserName = "bradpitt",
                            VerifyCode = "123456"
                        },
                        new
                        {
                            Id = "YizSnc1Hj7JlhbdpGhsxw",
                            CreateAt = new DateTime(2024, 4, 4, 14, 27, 25, 885, DateTimeKind.Local).AddTicks(8144),
                            Email = "angelinajolie@gmail.com",
                            FirstName = "Angelina",
                            LastName = "Jolie",
                            Password = "$2a$11$N9RWDyBeQRux.sUzm9k3w.qE5hP6M7XXC33xTgWe.b2OloTYl5XYG",
                            PhoneNumber = "0123456785",
                            Role = 0,
                            Status = 1,
                            UpdateAt = new DateTime(2024, 4, 4, 14, 27, 25, 885, DateTimeKind.Local).AddTicks(8147),
                            UserName = "angelinajolie",
                            VerifyCode = "123456"
                        });
                });

            modelBuilder.Entity("QuicklyGo.Models.UserConversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(21)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastSeenMessage")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MessageId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(21)");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("UserConversations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConversationId = "KwofCoKs3ThJVE5gOkbn8",
                            CreateAt = new DateTime(2024, 4, 4, 14, 27, 25, 885, DateTimeKind.Local).AddTicks(8442),
                            LastSeenMessage = new DateTime(2024, 4, 4, 14, 27, 25, 885, DateTimeKind.Local).AddTicks(8440),
                            Status = 1,
                            UpdateAt = new DateTime(2024, 4, 4, 14, 27, 25, 885, DateTimeKind.Local).AddTicks(8443),
                            UserId = "0KhfroI2WdGEHFQf7LU6B"
                        },
                        new
                        {
                            Id = 2,
                            ConversationId = "KwofCoKs3ThJVE5gOkbn8",
                            CreateAt = new DateTime(2024, 4, 4, 14, 27, 25, 885, DateTimeKind.Local).AddTicks(8448),
                            LastSeenMessage = new DateTime(2024, 4, 4, 14, 27, 25, 885, DateTimeKind.Local).AddTicks(8447),
                            Status = 1,
                            UpdateAt = new DateTime(2024, 4, 4, 14, 27, 25, 885, DateTimeKind.Local).AddTicks(8448),
                            UserId = "85GBCdMebC8qRHCXdDUqm"
                        });
                });

            modelBuilder.Entity("QuicklyGo.Models.Message", b =>
                {
                    b.HasOne("QuicklyGo.Models.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuicklyGo.Models.User", "Creator")
                        .WithMany("Messages")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("QuicklyGo.Models.Notice", b =>
                {
                    b.HasOne("QuicklyGo.Models.User", "User")
                        .WithMany("Notices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuicklyGo.Models.ReadMessage", b =>
                {
                    b.HasOne("QuicklyGo.Models.Message", "Message")
                        .WithMany("ReadMessages")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuicklyGo.Models.User", "Receipient")
                        .WithMany("ReadMessages")
                        .HasForeignKey("ReceipientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("Receipient");
                });

            modelBuilder.Entity("QuicklyGo.Models.Relationship", b =>
                {
                    b.HasOne("QuicklyGo.Models.User", "Friend")
                        .WithMany("FriendRelationships")
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuicklyGo.Models.User", "User")
                        .WithMany("Relationships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Friend");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuicklyGo.Models.UserConversation", b =>
                {
                    b.HasOne("QuicklyGo.Models.Conversation", "Conversation")
                        .WithMany("UserConversations")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuicklyGo.Models.Message", null)
                        .WithMany("UserConversations")
                        .HasForeignKey("MessageId");

                    b.HasOne("QuicklyGo.Models.User", "User")
                        .WithMany("UserConversations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuicklyGo.Models.Conversation", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("UserConversations");
                });

            modelBuilder.Entity("QuicklyGo.Models.Message", b =>
                {
                    b.Navigation("ReadMessages");

                    b.Navigation("UserConversations");
                });

            modelBuilder.Entity("QuicklyGo.Models.User", b =>
                {
                    b.Navigation("FriendRelationships");

                    b.Navigation("Messages");

                    b.Navigation("Notices");

                    b.Navigation("ReadMessages");

                    b.Navigation("Relationships");

                    b.Navigation("UserConversations");
                });
#pragma warning restore 612, 618
        }
    }
}
